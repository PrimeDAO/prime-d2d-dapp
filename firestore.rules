rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isPublicDeal() {
      return !resource.data.registrationData.isPrivate;
    }

    function userIsProposalLead() {
      return request.auth.uid == resource.data.registrationData.proposalLead.address;
    }

    function userIsRepresentative() {
      return request.auth.uid in resource.data.representativesAddresses;
    }

    function userIsAuthenticated() {
      return request.auth != null;
    }

    function updateOnlyToDiscussions() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clauseDiscussions']);
    }

    match /deals-token-swap/{deal} {
      allow read: if isPublicDeal() || userIsProposalLead() || userIsRepresentative();
      allow update: if userIsProposalLead() || updateOnlyToDiscussions();
      allow create, delete: if true;
    }

    match /deals-token-swap/{deal}/primary-dao-votes/{representative} {
      allow read, create, delete: if false;
      allow update: if request.auth.uid == resource.id;
    }

    match /deals-token-swap/{deal}/partner-dao-votes/{representative} {
      allow read, create, delete: if false;
      allow update: if request.auth.uid == resource.id;
    }

    match /deals-token-swap-updates/{document} {
      allow read: if true;
      allow write: if false;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
