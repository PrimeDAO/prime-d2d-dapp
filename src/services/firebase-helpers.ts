import axios from "axios";
import { initializeApp } from "firebase/app";
import { getAuth, connectAuthEmulator, UserCredential, signOut, setPersistence, inMemoryPersistence, signInWithCustomToken as singInToFirebaseWithCustomToken} from "firebase/auth";
import { initializeFirestore, getFirestore, connectFirestoreEmulator } from "firebase/firestore";
import { getFunctions, connectFunctionsEmulator } from "firebase/functions";

// Initialize Firebase
export const firebaseApp = initializeApp({
  apiKey: process.env.FIREBASE_API_KEY,
  authDomain: process.env.FIREBASE_AUTH_DOMAIN,
  projectId: process.env.FIREBASE_PROJECT_ID,
  appId: process.env.FIREBASE_APP_ID,
});

/**
  * Fix Cypress specific timeout issue
  *  "Could not reach Cloud Firestore backend. Backend didn't respond within 10 seconds.""
  */
if (process.env.FIREBASE_ENVIRONMENT === "local") {
  initializeFirestore(firebaseApp, { experimentalForceLongPolling: true });
}

export const firebaseDatabase = getFirestore();
export const firebaseAuth = getAuth();
export const firebaseFunctions = getFunctions(firebaseApp);

// Connects to emulators on local environment
if (process.env.FIREBASE_ENVIRONMENT === "local") {
  connectFirestoreEmulator(firebaseDatabase, "localhost", 8080);
  connectAuthEmulator(firebaseAuth, "http://localhost:9099");
  connectFunctionsEmulator(firebaseFunctions, "localhost", 5001);
}

/**
    * Calls Firebase function which creates a token used to sign in to Firebase from the frontend
    */
export async function createCustomToken(address: string): Promise < string > {
  const response = await axios.post(`${process.env.FIREBASE_FUNCTIONS_URL}/createCustomToken`, { address });

  return response.data.token;
}

/**
    * Sign in to Firebase with custom token (generated by a Firebase function)
    */
export async function signInWithCustomToken(token: string): Promise < UserCredential > {
  // TODO handle failure
  return singInToFirebaseWithCustomToken(firebaseAuth, token);
}

/**
  * Requests custom token for the address from Firebase function and signs in to Firebase
  */
export async function signInToFirebase(address: string): Promise<UserCredential> {
  // Signs out from Firebase in case another user was authenticated
  // (could happen when user disconnect and connect a new wallet)
  await signOut(firebaseAuth);

  // Requests a custom Firebase Token used for signing in to Firebase, from our Firebase Function
  const token = await createCustomToken(address);

  // Firebase Authentication will be persisted in memory only
  // that is on browser refresh the Firebase access token will be lost
  await setPersistence(firebaseAuth, inMemoryPersistence);

  // Signs in to Firebase with a given custom token
  return signInWithCustomToken(token);
}
